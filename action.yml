name: "Application observability for AWS Action v0.1"
description: "GitHub automation with Amazon Q Developer CLI. Auto-detects @awsapm mentions in PR comments and issues."
branding:
  icon: "at-sign"
  color: "orange"

inputs:
  bot_name:
    description: "The bot name to respond to in comments (e.g., @awsapm)"
    required: false
    default: "@awsapm"
  target_branch:
    description: "The branch to merge PRs into (defaults to repository default branch)"
    required: false
  branch_prefix:
    description: "Prefix for branches created by the action (e.g., 'awsapm/', 'awsapm-')"
    required: false
    default: "awsapm/"
  allowed_non_write_users:
    description: "Comma-separated list of GitHub usernames allowed to use this action even without write access. Empty string (default) means only users with write/admin access can use it."
    required: false
    default: ""
  github_token:
    description: "GitHub token to use for API calls. If not provided, uses the default GitHub Actions token."
    required: false
    default: ${{ github.token }}
  aws_access_key_id:
    description: "AWS access key ID for Amazon Q Developer CLI and Application Signals MCP"
    required: true
  aws_secret_access_key:
    description: "AWS secret access key for Amazon Q Developer CLI and Application Signals MCP"
    required: true
  aws_session_token:
    description: "AWS session token (optional, for temporary credentials)"
    required: false
  aws_region:
    description: "AWS region for Amazon Q Developer CLI and Application Signals MCP"
    required: false
    default: "us-east-1"
  custom_prompt:
    description: "Custom instructions to guide the AI agent's analysis and actions"
    required: false
    default: ""
  tracing_mode:
    description: "Enable tracing to show AI agent reasoning steps and MCP tool calls in workflow summary"
    required: false
    default: "true"

outputs:
  execution_file:
    description: "Path to the Amazon Q Developer CLI execution output file"
    value: ${{ steps.aws-apm-cli.outputs.execution_file }}
  branch_name:
    description: "The branch created by Application observability for AWS Action for this execution"
    value: ${{ steps.init.outputs.AWSAPM_BRANCH }}
  github_token:
    description: "The GitHub token used by the action"
    value: ${{ steps.init.outputs.GITHUB_TOKEN }}

runs:
  using: "composite"
  steps:
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Dependencies
      shell: bash
      run: |
        cd ${GITHUB_ACTION_PATH}
        npm install

    - name: Init action
      id: init
      shell: bash
      run: |
        node ${GITHUB_ACTION_PATH}/src/init.js
      env:
        CUSTOM_PROMPT: ${{ inputs.custom_prompt }}
        BOT_NAME: ${{ inputs.bot_name }}
        TARGET_BRANCH: ${{ inputs.target_branch }}
        BRANCH_PREFIX: ${{ inputs.branch_prefix }}
        OVERRIDE_GITHUB_TOKEN: ${{ inputs.github_token }}
        ALLOWED_NON_WRITE_USERS: ${{ inputs.allowed_non_write_users }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        DEFAULT_WORKFLOW_TOKEN: ${{ github.token }}
        TRACING_MODE: ${{ inputs.tracing_mode }}

    - name: Install CLI Tools
      if: steps.init.outputs.contains_trigger == 'true'
      shell: bash
      run: |
        set -e  # Exit immediately if any command fails

        # Install uv/uvx for MCP server execution
        echo "Installing uv package manager for MCP server support..."
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"

        # Verify uvx installation
        if ! command -v uvx &> /dev/null; then
          echo "::error::uvx installation failed - Amazon Q MCP tools will not work"
          exit 1
        fi
        echo "uvx installed successfully"
        uvx --version

        # Install Amazon Q Developer CLI
        echo "Installing Amazon Q Developer CLI..."
        sudo apt-get update
        curl -L -o amazon-q.deb https://desktop-release.q.us-east-1.amazonaws.com/1.18.1/amazon-q.deb
        sudo apt-get install -y --fix-missing ./amazon-q.deb || sudo apt-get install -y -f

        # Verify Amazon Q CLI installation
        if ! command -v q &> /dev/null; then
          echo "::error::Amazon Q CLI installation failed - q command not found in PATH"
          exit 1
        fi
        echo "Amazon Q CLI installed successfully"
        q --version
        

    - name: Run Application observability for AWS Investigation
      id: aws-apm-cli
      if: steps.init.outputs.contains_trigger == 'true'
      shell: bash
      run: |
        cd ${GITHUB_ACTION_PATH}
        node src/execute.js
      env:
        GITHUB_TOKEN: ${{ steps.init.outputs.GITHUB_TOKEN }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_SESSION_TOKEN: ${{ inputs.aws_session_token }}
        AWS_REGION: ${{ inputs.aws_region }}
        INPUT_PROMPT_FILE: ${{ runner.temp }}/awsapm-prompts/awsapm-prompt.txt

    - name: Update comment with results
      if: steps.init.outputs.contains_trigger == 'true' && steps.init.outputs.awsapm_comment_id && always()
      shell: bash
      run: |
        cd ${GITHUB_ACTION_PATH}
        node src/post-result.js
      env:
        REPOSITORY: ${{ github.repository }}
        PR_NUMBER: ${{ github.event.issue.number || github.event.pull_request.number }}
        AWSAPM_COMMENT_ID: ${{ steps.init.outputs.awsapm_comment_id }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_TOKEN: ${{ steps.init.outputs.GITHUB_TOKEN }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        TRIGGER_COMMENT_ID: ${{ github.event.comment.id }}
        AWSAPM_BRANCH: ${{ steps.init.outputs.AWSAPM_BRANCH }}
        IS_PR: ${{ github.event.issue.pull_request != null || github.event_name == 'pull_request_review_comment' }}
        TARGET_BRANCH: ${{ steps.init.outputs.TARGET_BRANCH }}
        AWSAPM_SUCCESS: ${{ steps.aws-apm-cli.outputs.conclusion == 'success' }}
        OUTPUT_FILE: ${{ steps.aws-apm-cli.outputs.execution_file || '' }}
        TRIGGER_USERNAME: ${{ github.event.comment.user.login || github.event.issue.user.login || github.event.pull_request.user.login || github.event.sender.login || github.triggering_actor || github.actor || '' }}
        INIT_SUCCESS: ${{ steps.init.outcome == 'success' }}